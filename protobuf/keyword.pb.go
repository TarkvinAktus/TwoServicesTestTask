// Code generated by protoc-gen-go. DO NOT EDIT.
// source: keyword.proto

package keyword

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type KeyWordReq struct {
	Word                 string   `protobuf:"bytes,1,opt,name=word,proto3" json:"word,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeyWordReq) Reset()         { *m = KeyWordReq{} }
func (m *KeyWordReq) String() string { return proto.CompactTextString(m) }
func (*KeyWordReq) ProtoMessage()    {}
func (*KeyWordReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_14f10ed5a2e29225, []int{0}
}

func (m *KeyWordReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyWordReq.Unmarshal(m, b)
}
func (m *KeyWordReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyWordReq.Marshal(b, m, deterministic)
}
func (m *KeyWordReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyWordReq.Merge(m, src)
}
func (m *KeyWordReq) XXX_Size() int {
	return xxx_messageInfo_KeyWordReq.Size(m)
}
func (m *KeyWordReq) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyWordReq.DiscardUnknown(m)
}

var xxx_messageInfo_KeyWordReq proto.InternalMessageInfo

func (m *KeyWordReq) GetWord() string {
	if m != nil {
		return m.Word
	}
	return ""
}

type RedisKeyResp struct {
	RedisKey             string   `protobuf:"bytes,1,opt,name=redisKey,proto3" json:"redisKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RedisKeyResp) Reset()         { *m = RedisKeyResp{} }
func (m *RedisKeyResp) String() string { return proto.CompactTextString(m) }
func (*RedisKeyResp) ProtoMessage()    {}
func (*RedisKeyResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_14f10ed5a2e29225, []int{1}
}

func (m *RedisKeyResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RedisKeyResp.Unmarshal(m, b)
}
func (m *RedisKeyResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RedisKeyResp.Marshal(b, m, deterministic)
}
func (m *RedisKeyResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedisKeyResp.Merge(m, src)
}
func (m *RedisKeyResp) XXX_Size() int {
	return xxx_messageInfo_RedisKeyResp.Size(m)
}
func (m *RedisKeyResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RedisKeyResp.DiscardUnknown(m)
}

var xxx_messageInfo_RedisKeyResp proto.InternalMessageInfo

func (m *RedisKeyResp) GetRedisKey() string {
	if m != nil {
		return m.RedisKey
	}
	return ""
}

func init() {
	proto.RegisterType((*KeyWordReq)(nil), "KeyWordReq")
	proto.RegisterType((*RedisKeyResp)(nil), "RedisKeyResp")
}

func init() { proto.RegisterFile("keyword.proto", fileDescriptor_14f10ed5a2e29225) }

var fileDescriptor_14f10ed5a2e29225 = []byte{
	// 136 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcd, 0x4e, 0xad, 0x2c,
	0xcf, 0x2f, 0x4a, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x52, 0xe0, 0xe2, 0xf2, 0x4e, 0xad,
	0x0c, 0xcf, 0x2f, 0x4a, 0x09, 0x4a, 0x2d, 0x14, 0x12, 0xe2, 0x62, 0x01, 0xc9, 0x49, 0x30, 0x2a,
	0x30, 0x6a, 0x70, 0x06, 0x81, 0xd9, 0x4a, 0x5a, 0x5c, 0x3c, 0x41, 0xa9, 0x29, 0x99, 0xc5, 0xde,
	0xa9, 0x95, 0x41, 0xa9, 0xc5, 0x05, 0x42, 0x52, 0x5c, 0x1c, 0x45, 0x50, 0x3e, 0x54, 0x1d, 0x9c,
	0x6f, 0x64, 0xc7, 0x25, 0x00, 0x35, 0xcd, 0x37, 0xb5, 0xb8, 0x38, 0x31, 0x3d, 0x33, 0x2f, 0x5d,
	0x48, 0x8b, 0x8b, 0x2b, 0x38, 0xb5, 0x04, 0x2a, 0x2c, 0xc4, 0xad, 0x87, 0xb0, 0x4e, 0x8a, 0x57,
	0x0f, 0xd9, 0x64, 0x25, 0x86, 0x24, 0x36, 0xb0, 0xa3, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x35, 0xa7, 0x60, 0xe8, 0xa5, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// KeyWordMessagingClient is the client API for KeyWordMessaging service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KeyWordMessagingClient interface {
	SetKeyWord(ctx context.Context, in *KeyWordReq, opts ...grpc.CallOption) (*RedisKeyResp, error)
}

type keyWordMessagingClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyWordMessagingClient(cc grpc.ClientConnInterface) KeyWordMessagingClient {
	return &keyWordMessagingClient{cc}
}

func (c *keyWordMessagingClient) SetKeyWord(ctx context.Context, in *KeyWordReq, opts ...grpc.CallOption) (*RedisKeyResp, error) {
	out := new(RedisKeyResp)
	err := c.cc.Invoke(ctx, "/KeyWordMessaging/SetKeyWord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyWordMessagingServer is the server API for KeyWordMessaging service.
type KeyWordMessagingServer interface {
	SetKeyWord(context.Context, *KeyWordReq) (*RedisKeyResp, error)
}

// UnimplementedKeyWordMessagingServer can be embedded to have forward compatible implementations.
type UnimplementedKeyWordMessagingServer struct {
}

func (*UnimplementedKeyWordMessagingServer) SetKeyWord(ctx context.Context, req *KeyWordReq) (*RedisKeyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetKeyWord not implemented")
}

func RegisterKeyWordMessagingServer(s *grpc.Server, srv KeyWordMessagingServer) {
	s.RegisterService(&_KeyWordMessaging_serviceDesc, srv)
}

func _KeyWordMessaging_SetKeyWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyWordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyWordMessagingServer).SetKeyWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KeyWordMessaging/SetKeyWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyWordMessagingServer).SetKeyWord(ctx, req.(*KeyWordReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _KeyWordMessaging_serviceDesc = grpc.ServiceDesc{
	ServiceName: "KeyWordMessaging",
	HandlerType: (*KeyWordMessagingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetKeyWord",
			Handler:    _KeyWordMessaging_SetKeyWord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "keyword.proto",
}
